[user]
	name = Christopher Welborn
	email = cj@welbornprod.com
[push]
	default = matching
[branch]
	autosetuprebase = always
[color]
	status = always
	branch = always
	ui = always
[core]
	attributesfile = /home/cj/.gitattributes
	excludesfile = /home/cj/.gitignore
	editor = vim
	templatedir = /home/cj/.git-templates
[giggle]
	main-window-maximized = false
	main-window-geometry = 858x619+355+65
	history-view-vpane-position = 263
	file-view-vpane-position = 529
	main-window-view = HistoryView
[alias]
	# Helpers from https://git.wiki.kernel.org/index.php/Aliases#Advanced_aliases_with_arguments
	# graphviz output should be piped to `dotty`, with 'git graphviz | dotty /dev/stdin'
	graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
	# whois should be called with at least part of an author name.
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
	# whatis should be called with a commit id.
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

	# List all branches (also, you can use branches -a | -r).
	branches = branch -v
	# Hacky way to make fzf's git-related commands available as aliases.
	# Browse, and checkout a branch.
	fco = "!bash -c \"source /home/cj/bash.alias.sh; fzfco\""
	# Browse, and checkout a specific commit.
	fcoc = "!bash -c \"source /home/cj/bash.alias.sh; fzfcoc\""
	# Browse, and show a specific commit.
	fshow = "!bash -c \"source /home/cj/bash.alias.sh; fzfshow\""

	# Commits all files that are already added to the repo, with a short msg.
	commit-tracked = commit -am
	ct = commit -am
	# Commits all files that are already added to the repo, using `core.editor` for the msg.
	commit-longmsg = commit -a
	cl = commit -a
	# Print a command, and then run it. The command is ran in the current shell.
	run = "!printf \"%s \" \"$@\"; printf \"\n\"; bash -c \"$@\""

	# Show the last commit.
    last-commit = show --pretty=oneline
	# List the last 10 commits, Usage: last-commits [revision] [number]
	# If only a number is given, or no arguments are given, then HEAD is used.
	last-commits = "!gitlog() { local rev=${1:-HEAD} num=${2:-10}; if echo $rev | egrep -q '^[0-9]+$'; then num=$rev; rev=HEAD; fi; git log --pretty=oneline $rev | head -n $num; }; gitlog"
	# List all commits.
	show-commits = log --pretty=oneline
	# Pure aliases, for typing reasons.
	co = checkout
	stat = status
	s = status
	p = push
	# These are only here because my keyboard isn't that great.
	sta = status
	st = status
	stt = status
	# Show tag names and descriptions.
	tags = tag -l -n1
	# Show number of files changed, insertions, deletions.
	diffstat = diff --stat
	# Search for commits using a text search on the changed lines. Ex: git search 'import'
	search = log --pretty=oneline -S
	# Search for commits using regex on the changed lines. Ex: git rsearch 'def \w+'
	rsearch = log --pretty=oneline -G
	# Search for commits that changed a line range. Ex: git lsearch 1,10:myfile.py
	lsearch = log --pretty=oneline -L
	# Use git-quick-stats if available.
	quick-stats = "! if hash git-quick-stats &>/dev/null; then /home/cj/.local/bin/git-quick-stats; else printf 'Missing git-quick-stats!\nClone from: git://github.com/arzzen/git-quick-stats.git\n'"
	# Show commits that haven't been pushed to remote yet.
	# This is also a feature of `git-remotes`.
	unpushed = "!gitunpushed() { local repo=${1:-welbornprod/dev}; git log --pretty=oneline $repo..HEAD; }; gitunpushed"
	unpulled = "!gitunpulled() { local repo=${1:-welbornprod/dev}; local repoargs=`echo $repo | tr '/' ' '`; if git fetch $repoargs 1>/dev/null 2>/dev/null; then git log --pretty=oneline HEAD..$repo; else printf \"No changes for:$repo\\n\"; fi; }; gitunpulled"
	# Show a diff for commits that haven't been pushed to remote yet.
	remotediff = "!gitremotediff() { local repo=${1:-welbornprod/dev}; git diff --pretty=oneline $repo..HEAD; }; gitremotediff"
	# Use `hub` to list issues.
	issue = "!hub issue"
	# Use `hub` to list issues with their full body text.
	issues = "!hub issue -f '%n%sC%>(8)%i%Creset %t% l%n%Ccyan%b%Creset%n'"
	merg = merge --no-ff
	mergedev = !git co master && git merge --no-ff dev && git co dev

[credential "https://github.com"]
	username=cjwelborn

[diff]
	tool = meld

[merge]
	tool = meld
